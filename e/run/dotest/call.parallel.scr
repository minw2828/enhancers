#!/bin/bash

# Description:
# Run the same script per file or per record in parallel.
# Min Wang, April 2016

# Requirement:
# You will need to adjust parameters under [program], [input] and [output] to 
# fit your case.

# Execution:
# sh call.enrichment.scr [script_name] [parallel_index]


#################### parameters ####################
projdate='2016-01-19'
psf='e'
task="dotest"
parallel_index=$2
phenos=('FY' 'MY' 'PY')
dbs=('VISTA' 'FANTOM5' 'dbSUPER' 'H3K4me3' 'H3K27Ac' 'tender' 'tough' 'CTCF')
pDis1='NA'    # a numeric value defines the promoter regions used in promoter() function. If NA, use default setting in upstream in the function: promoters(x, upstream=2000, downstream=200, ...)
pDis2='NA'    # a numeric value defines the promoter regions used in promoter() function. If NA, use default setting in downstream in the function: promoters(x, upstream=2000, downstream=200, ...)
pSigCTCFs=('10e-05' '10e-08')
mss=(0 80)
pTests=('10e-03' '5e-02' '10e-02')

#################### Define paths ####################
path_pre='/group/dairy/Min/geno2pheno'
path_analyse="$path_pre/analyses/$projdate/$psf"
path_data="$path_pre/data"
path_software="$path_pre/software"
binpath="$path_analyse/bin/$task"; runpath="$path_analyse/run/$task"; outpath="$path_analyse/out/$task"

#################### program files ####################
prog_file1=$1
prog_path1=$runpath

#################### inputs ####################
infile1="chroms.txt"
inpath1="$path_software/emmax"

#################### analysis ####################
# parallel_index: 01
function qsub_pheno { 
    for a in ${phenos[@]}; do 
        qsub -v pheno=$a $prog_path1/$prog_file1
    done 
}

# parallel_index: 02
function qsub_db { 
    for b in ${dbs[@]}; do 
        qsub -v db=$b $prog_path1/$prog_file1
    done 
}

# parallel_index: 03
function qsub_pSigCTCFms {
    for (( i = 0; i < ${#pSigCTCFs[@]}; ++i)); do
        qsub -v pSigCTCF=${pSigCTCFs[$i]},ms=${mss[$i]} $prog_path1/$prog_file1
    done
}

# parallel_index: 04
function qsub_pTtest {
    for d in ${pTtests[@]}; do
        qsub -v pSigCTCF=${pSigCTCFs[$i]},ms=${mss[$i]},pTest=$d $prog_path1/$prog_file1
    done
}

# parallel_index: 05
function qsub_pheno_db {
    for a in ${phenos[@]}; do
        for b in ${dbs[@]}; do
            qsub -v pheno=$a,db=$b $prog_path1/$prog_file1
        done
    done
}

# parallel_index: 06
function qsub_pheno_pSigCTCFms {
    for a in ${phenos[@]}; do
        for (( i = 0; i < ${#pSigCTCFs[@]}; ++i)); do
            qsub -v pheno=$a,pSigCTCF=${pSigCTCFs[$i]},ms=${mss[$i]} $prog_path1/$prog_file1
        done
    done
}

# parallel_index: 07
function qsub_db_pSigCTCFms {
    for b in ${dbs[@]}; do
        for (( i = 0; i < ${#pSigCTCFs[@]}; ++i)); do
            qsub -v db=$b,pSigCTCF=${pSigCTCFs[$i]},ms=${mss[$i]} $prog_path1/$prog_file1
        done
    done
}

# parallel_index: 08
function qsub_pheno_pTest {
    for a in ${phenos[@]}; do
        for c in ${pTests[@]}; do
            qsub -v pheno=$a,pTest=$c $prog_path1/$prog_file1
        done
    done
}

# parallel_index: 09
function qsub_db_pTest {
    for b in ${dbs[@]}; do
        for c in ${pTests[@]}; do
            qsub -v db=$b,pTest=$c $prog_path1/$prog_file1
        done
    done
}

# parallel_index: 10
function qsub_pSigCTCFms_pTest {
    for (( i = 0; i < ${#pSigCTCFs[@]}; ++i)); do
        for c in ${pTests[@]}; do
            qsub -v pSigCTCF=${pSigCTCFs[$i]},ms=${mss[$i]},pTest=$c $prog_path1/$prog_file1
        done
    done
}

# parallel_index: 11
function qsub_pheno_db_pSigCTCFms {
    for a in ${phenos[@]}; do
        for b in ${dbs[@]}; do
            for (( i = 0; i < ${#pSigCTCFs[@]}; ++i)); do
                qsub -v pheno=$a,db=$b,pSigCTCF=${pSigCTCFs[$i]},ms=${mss[$i]} $prog_path1/$prog_file1
            done
        done
    done
}

# parallel_index: 12
function qsub_pheno_db_pSigCTCFmsBoolean {
    for a in ${phenos[@]}; do
        for b in ${dbs[@]}; do
            if [[ $db -ne 'CTCF' ]]; then 
                qsub -v pheno=$a,db=$b $prog_path1/$prog_file1
            else 
                for (( i = 0; i < ${#pSigCTCFs[@]}; ++i)); do
                    qsub -v pheno=$a,db=$b,pSigCTCF=${pSigCTCFs[$i]},ms=${mss[$i]} $prog_path1/$prog_file1
                done 
            fi
        done
    done
}

if   [ $parallel_index -eq 01 ]; then qsub_pheno
elif [ $parallel_index -eq 02 ]; then qsub_db
elif [ $parallel_index -eq 03 ]; then qsub_pSigCTCFms
elif [ $parallel_index -eq 04 ]; then qsub_pTest
elif [ $parallel_index -eq 05 ]; then qsub_pheno_db
elif [ $parallel_index -eq 06 ]; then qsub_pheno_pSigCTCFms
elif [ $parallel_index -eq 07 ]; then qsub_db_pSigCTCFms
elif [ $parallel_index -eq 08 ]; then qsub_pheno_pTest
elif [ $parallel_index -eq 09 ]; then qsub_db_pTest 
elif [ $parallel_index -eq 10 ]; then qsub_pSigCTCFms_pTest
elif [ $parallel_index -eq 11 ]; then qsub_pheno_db_pSigCTCFms
elif [ $parallel_index -eq 12 ]; then qsub_pheno_db_pSigCTCFmsBoolean
fi


exit 0

